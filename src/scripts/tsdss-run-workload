#!/bin/sh
#
# Copyright 2017 PostgreSQL Global Development Group
#

usage() {
	echo "Usage: `basename $0` <options>"
	echo
	echo "Options:"
	echo "  -a         Execute queries for db analysis instead of queryresults"
	echo "  -C <int>   Number of sales data file segments to generate, default 1"
	echo "  -D <str>   Database management system to test: pgsql"
	echo "  -g         Generate data files"
	echo "  -h         This help message"
	echo "  -L         Enable Linux perf profiling"
	echo "  -i <path>  Path to generate data files"
	echo "  -o <path>  Path to save results"
	echo "  -P <str>   Database parameters"
	echo "  -p <int>   Number of products to generate, default 1"
	echo "  -s <int>   Gibibytes of sales data to generate, default 1"
	echo "  -t <path>  Query template directory"
	echo "  -y <int>   Number of years of data to generate, default 1"
}

CHUNKS=1
DATAFILE_PATH="/tmp" # Some programs require absolute path.
DBMS=""
FLAG_ANALYZE=""
FLAG_DBPARAMS=""
FLAG_GENERATE_DATA=""
FLAG_LINUXPERF=""
OUTDIR=""
PRODUCTS=1
SCALE_FACTOR=1
TEMPLATE_DIR=""
TEST_ALL=1
YEARS=1

while getopts "12aC:D:ghi:Lo:P:p:s:t:y:" OPT; do
	case $OPT in
	1)
		TEST_ALL=0
		TEST_LOAD=1
		;;
	2)
		TEST_ALL=0
		TEST_POWER=1
		;;
	a)
		FLAG_ANALYZE="-a"
		;;
	C)
		CHUNKS=$OPTARG
		;;
	D)
		DBMS=$OPTARG
		;;
	g)
		FLAG_GENERATE_DATA="-g"
		;;
	h)
		usage
		exit 0
		;;
	i)
		DATAFILE_PATH=$OPTARG
		;;
	L)
		FLAG_LINUXPERF="-L"
		;;
	o)
		OUTDIR=$OPTARG
		if [ -d $OUTDIR ]; then
			echo "Results directory already exists: $OUTDIR"
			exit 2
		fi
		mkdir -p $OUTDIR
		;;
	P)
		FLAG_DBPARAMS="-P \"$OPTARG\""
		;;
	p)
		PRODUCTS=$OPTARG
		;;
	s)
		SCALE_FACTOR=$OPTARG
		;;
	t)
		TEMPLATE_DIR=$OPTARG
		;;
	y)
		YEARS=$OPTARG
		;;
	esac
done

if [ "x$DBMS" = "x" ]; then
	echo "ERROR: Specify DBMS to test"
	exit 1
fi

if [ "x$OUTDIR" = "x" ]; then
	echo "ERROR: Specify directory to save results"
	exit 1
fi

# Check for DBMS specific environment variables.
if [ "x$DBMS" = "xpgsql" ]; then
	if [ -z $PGDATA ]; then
		echo "ERROR: PGDATA not defined."
		exit 3
	fi
	if [ -z $PGDATABASE ]; then
		echo "ERROR: PGDATABASE not defined."
		exit 3
	fi
fi

# Check for test specific settings.
if [ $TEST_ALL -eq 1 ] || [ $TEST_POWER -eq 1 ]; then
	if [ -z $TEMPLATE_DIR ]; then
		echo "ERROR: specify $DBMS template directory with -t"
		exit 4
	fi
fi

README="$OUTDIR/readme.txt"

echo "Test paramters:"
echo "  DBMS: $DBMS" >> $README
echo "  Scale Factor: $SCALE_FACTOR" >> $README
echo "  Products: $PRODUCTS" >> $README
echo "  Years: $YEARS" >> $README
cat $README
echo "  Command line arguments: $@" >> $README

if [ $TEST_ALL -eq 1 ] || [ $TEST_LOAD -eq 1 ]; then
	LOADCMD="tsdss-load-test -D $DBMS -i $DATAFILE_PATH -C $CHUNKS "
	LOADCMD="$LOADCMD -s $SCALE_FACTOR -p $PRODUCTS -y $YEARS -o $OUTDIR "
	LOADCMD="$LOADCMD $FLAG_DBPARAMS $FLAG_GENERATE_DATA $FLAG_LINUXPERF"

	eval $LOADCMD
	RC=$?
	if [ $RC -ne 0 ]; then
		echo "ERROR: tsdss-load-test $RC"
		echo "       $LOADCMD"
		exit 1
	fi
fi

if [ $TEST_ALL -eq 1 ] || [ $TEST_POWER -eq 1 ]; then
	POWERCMD="tsdss-power-test -D $DBMS -t $TEMPLATE_DIR -s $SCALE_FACTOR "
	POWERCMD="$POWERCMD -p $PRODUCTS -y $YEARS -o $OUTDIR $FLAG_DBPARAMS "
	POWERCMD="$POWERCMD $FLAG_ANALYZE $FLAG_LINUXPERF"

	eval $POWERCMD
	RC=$?
	if [ $RC -ne 0 ]; then
		echo "ERROR: tsdss-power-test $RC"
		echo "       $POWERCMD"
		exit 1
	fi
fi

echo "Post processing results..."
tsdss-post-process -o $OUTDIR

echo "Workload complete."

exit 0
